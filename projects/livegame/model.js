// Это ваша модель данных. Она состоит из двумерного массива state. Если state[i][j] равен 1,
// это означает, что клетка с координатами i, j живая. А если state[i][j] равен 0, то мертвая.

const N = 20;
const cellSize = 20;
const deadColor = "#000";
const liveColor = "#0F0"

// Вот тут происходит создание и инициализация состояния. Инициализация - это запись начального
// значения в переменные
let state = [];
for (let i=0; i<N; i++) {
    state.push([]);
    for (let j=0; j<N; j++) {
        state[i][j] = 0;
    }
}

state[1][1] = 1;


// TODO: Создание модели
// Вот тут должна быть Ваша функция изменения состояния, которая выполняет один шаг игры
// (можете ее переименовать)
function stateTransition() {
    // Эта функция должна перебирать все ячейки таблицы и решать что нужно сделать с этой ячейкой на данном шаге:
    // оживить, убить или оставить как есть.

    // Чтобы новое состояние не мешало старому по мере его вычисления, вот тут мы создадим его в
    // новой переменной newState, а в конце этой функции, мы сделаем присвоение state = newState,
    // чтобы затереть старое состояние новым
    let newState = [];
    for (let i=0; i<N; i++) {
        newState.push([]);
        for (let j=0; j<N; j++) {
            newState[i][j] = 0;
        }
    }

    // TODO:
    // Вот тут нужно реализовать циклы перебора всех ячеек и саму логику игры (правила)
    // Не забудьте про краевые условия!





    // Затираем старое состояние новым
    state = newState;
}
